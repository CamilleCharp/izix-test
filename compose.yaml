services:
  app-web:
    build:
      context: ./app
      dockerfile: ./docker/nginx/Dockerfile
    restart: unless-stopped # Automatically restart unless the service is explicitly stopped
    volumes:
      # Mount the 'app-storage' volume to '/var/www/storage' inside the container.
      # -----------------------------------------------------------
      # This volume stores persistent data like uploaded files and cache.
      # The ':ro' option mounts it as read-only in the 'web' service because Nginx only needs to read these files.
      # The 'php-fpm' service mounts the same volume without ':ro' to allow write operations.
      # -----------------------------------------------------------
      - app_storage:/var/www/storage:ro
    networks:
      - app
    ports:
      # Map port 80 inside the container to the port specified by 'app_NGINX_PORT' on the host machine.
      # -----------------------------------------------------------
      # This allows external access to the Nginx web server running inside the container.
      # For example, if 'app_NGINX_PORT' is set to '8080', accessing 'http://localhost:8080' will reach the application.
      # -----------------------------------------------------------
      - "${API_NGINX_PORT:-80}:80"
    depends_on:
      app-php-fpm:
        condition: service_healthy # Wait for php-fpm health check
  app-php-fpm:
    # For the php-fpm service, we will create a custom image to install the necessary PHP extensions and setup proper permissions.
    build:
      context: ./app
      dockerfile: ./docker/php-fpm/Dockerfile
      target: production # Use the 'production' stage in the Dockerfile
    restart: unless-stopped
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: ${TEST_API_DB}
      DB_USERNAME: ${TEST_API_USER}
      DB_PASSWORD: ${TEST_API_PASSWORD}
      SIMULATOR_app_KEY: ${SIMULATOR_API_KEY}
    volumes:
      - app:/var/www
      - app_storage:/var/www/storage # Mount the storage volume
    env_file:
      - ./app/.env
    networks:
      - app
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "php-fpm-healthcheck || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    # The 'depends_on' attribute with 'condition: service_healthy' ensures that
    # this service will not start until the 'postgres' service passes its health check.
    # This prevents the application from trying to connect to the database before it's ready.
    depends_on:
      postgres:
        condition: service_healthy
  simulator-web:
    build:
      context: ./simulator
      dockerfile: ./docker/nginx/Dockerfile
    restart: unless-stopped # Automatically restart unless the service is explicitly stopped
    volumes:
      # Mount the 'app-storage' volume to '/var/www/storage' inside the container.
      # -----------------------------------------------------------
      # This volume stores persistent data like uploaded files and cache.
      # The ':ro' option mounts it as read-only in the 'web' service because Nginx only needs to read these files.
      # The 'php-fpm' service mounts the same volume without ':ro' to allow write operations.
      # -----------------------------------------------------------
      - simulator_storage:/var/www/storage:ro
    networks:
      - app
    ports:
      # Map port 80 inside the container to the port specified by 'SIMULATOR_NGINX_PORT' on the host machine.
      # -----------------------------------------------------------
      # This allows external access to the Nginx web server running inside the container.
      # For example, if 'SIMULATOR_NGINX_PORT' is set to '8080', accessing 'http://localhost:8080' will reach the application.
      # -----------------------------------------------------------
      - "${SIMULATOR_NGINX_PORT:-80}:80"
    depends_on:
      simulator-php-fpm:
        condition: service_healthy # Wait for php-fpm health check
  simulator-php-fpm:
    # For the php-fpm service, we will create a custom image to install the necessary PHP extensions and setup proper permissions.
    build:
      context: ./simulator
      dockerfile: ./docker/php-fpm/Dockerfile
      target: production # Use the 'production' stage in the Dockerfile
    restart: unless-stopped
    environment:
      API_URL: 'http://app-web'
      SIMULATOR_API_KEY: ${SIMULATOR_app_KEY}
    volumes:
      - simulator:/var/www
      - simulator_storage:/var/www/storage # Mount the storage volume
    env_file:
      - ./simulator/.env
    networks:
      - app
    healthcheck:
      test: ["CMD-SHELL", "php-fpm-healthcheck || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    # The 'depends_on' attribute with 'condition: service_healthy' ensures that
    # this service will not start until the 'postgres' service passes its health check.
    # This prevents the application from trying to connect to the database before it's ready.
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgis/postgis:17-3.5
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}
      API_DB: ${TEST_API_DB}
      API_USER: ${TEST_API_USER}
      API_PASSWORD: ${TEST_API_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./app/docker/postgres/init.sh:/docker-entrypoint-initdb.d/init-db.sh:ro,Z # the Z marker is needed to allow reading with SELinux enabled
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - postgres



networks:
  app:
  postgres:

volumes:
  postgres_data:
  app_storage:
  app:
  simulator_storage:
  simulator:
